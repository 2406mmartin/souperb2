---
import Layout from '../layouts/Layout.astro';
import { supabase } from "../lib/supabase";

const { cookies } = Astro;
const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return Astro.redirect("/signin");
}

// Get user session
const { data: { session }, error: sessionError } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

if (sessionError || !session) {
  return Astro.redirect("/signin");
}

const userId = session.user.id;
---

<Layout title="Soup Quiz">
  <div class="min-h-screen flex flex-col bg-bue-blue bg-[url(background2.png)] bg-size-[auto_150px] diagonal-scroll">
    <!-- Header with back button -->
    <header class="fixed top-0 w-full p-4 flex justify-between items-center bg-creme border-b border-mustard z-10">
      <a href="/" class="text-sm text-orange hover:text-mustard transition-all duration-150">
        Back to Home
      </a>
      <h1 class="text-xl font-semibold text-mustard">Soup Quiz</h1>
      <div class="w-20"></div> <!-- Spacer for centering -->
    </header>

    <!-- Quiz container -->
    <div class="flex-1 pt-16 pb-4 px-4 max-w-md mx-auto w-full">
      <!-- Progress bar -->
      <div class="w-full bg-satured-creme rounded-full h-2 mb-8">
        <div id="progress-bar" class="bg-mustard h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
      </div>

      <!-- Welcome screen -->
      <div id="welcome-screen" class="flex flex-col items-center justify-center min-h-[60vh] text-center">
        <h2 class="text-2xl font-bold text-true-blue mb-4">Soup Selection Quiz:</h2>
        <h3 class="text-xl text-true-blue mb-8">Find The Perfect Soup For You!</h3>
        <button id="start-quiz" class="bg-true-blue hover:bg-black text-bue-blue hover:text-white  py-2 px-4 rounded-md gap-2 transition-all duration-150 hover:cursor-pointer">
          Start
        </button>
      </div>

      <!-- Quiz questions -->
      <div id="quiz-container" class="hidden">
        <h2 id="question-text" class="text-xl text-true-blue mb-6 text-center"></h2>
        <div id="options-container" class="grid gap-3"></div>
      </div>

      <!-- Results screen -->
      <div id="results" class="hidden">
        <h2 class="text-2xl font-bold text-mustard mb-4">Your Perfect Soup Match!</h2>
        <div id="recommendation" class="bg-satured-creme rounded-lg p-6 shadow-lg">
          <h3 id="soup-name" class="text-xl font-semibold text-mustard mb-2"></h3>
          <p id="soup-description" class="text-super-saturated-creme mb-4"></p>
          <div class="flex justify-between items-center">
            <button onclick="restartQuiz()" class="text-orange hover:text-mustard transition-all duration-150">
              Take Quiz Again
            </button>
            <button id="can-soup" class="bg-mustard text-creme px-4 py-2 rounded-md hover:bg-dark-orange transition-all duration-150">
              Can This Soup
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Expose Supabase client to window
    interface SupabaseClient {
      from: (table: string) => {
        select: (columns?: string) => {
          eq: (column: string, value: any) => {
            eq: (column2: string, value2: any) => {
              single: () => Promise<{ data: any; error: any }>;
            };
          };
        };
        insert: (data: any) => {
          select: () => {
            single: () => Promise<{ data: any; error: any }>;
          };
        };
      };
    }

    declare global {
      interface Window {
        supabase: SupabaseClient;
        userId: string;
      }
    }

    const supabaseClient: SupabaseClient = {
      from: (table: string) => ({
        select: (columns = '*') => ({
          eq: (column: string, value: any) => ({
            eq: (column2: string, value2: any) => ({
              single: async () => {
                const response = await fetch(`/api/supabase/${table}?userId=${window.userId}&column=${column}&value=${value}&column2=${column2}&value2=${value2}`, {
                  method: 'GET',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                });
                return response.json();
              },
            }),
          }),
        }),
        insert: (data: any) => ({
          select: () => ({
            single: async () => {
              // Don't add user_id for soups and soups_in_shelf tables
              const requestBody = (table === 'soups' || table === 'soups_in_shelf') ? data : { ...data, user_id: window.userId };
              const response = await fetch(`/api/supabase/${table}`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody),
              });
              return response.json();
            },
          }),
        }),
      }),
    };

    window.supabase = supabaseClient;
  </script>

  <script define:vars={{ userId }}>
    // Expose userId to window
    window.userId = userId;
    
    // Get DOM elements with null checks
    const welcomeScreen = document.getElementById('welcome-screen');
    const quizContainer = document.getElementById('quiz-container');
    const resultsScreen = document.getElementById('results');
    const startButton = document.getElementById('start-quiz');

    if (!welcomeScreen || !quizContainer || !resultsScreen || !startButton) {
      console.error('Required DOM elements not found');
      throw new Error('Required DOM elements not found');
    }

    const questions = [
      {
        text: "What symptoms are you currently experiencing?",
        type: "multiple",
        options: [
          "sore throat",
          "common cold",
          "nausea",
          "congestion",
          "upset stomach",
          "lack of energy",
          "fever",
          "fatigue",
          "stress",
          "post-illness recovery",
          "headache"
        ]
      },
      {
        text: "How do you prefer the consistency of your soup?",
        type: "multiple",
        options: [
          "creamy",
          "chunky",
          "broth",
          "hearty",
          "rich",
          "light",
          "thick"
        ]
      },
      {
        text: "How spicy do you prefer your food?",
        type: "multiple",
        options: [
          "mild",
          "very spicy",
          "spicy",
          "no spice",
          "sour",
          "sweet",
          "peppery",
          "zesty"
        ]
      },
      {
        text: "How would you describe your appetite right now?",
        type: "multiple",
        options: [
          "light",
          "heavy",
          "hungry",
          "moderate",
          "satisfied",
          "snacking",
          "full",
          "weak",
          "craving",
          "nothing"
        ]
      },
      {
        text: "Do you have any dietary restrictions?",
        type: "multiple",
        options: [
          "Dairy",
          "None",
          "Gluten",
          "Vegetarian",
          "Vegan",
          "Low-Carb",
          "Nut-Free",
          "Low-Sodium",
          "Sugar-Free"
        ]
      },
      {
        text: "How much time do you want to spend on your soup?",
        type: "single",
        options: [
          "5 minutes",
          "10 minutes",
          "15 minutes",
          "20 minutes",
          "30 minutes",
          "45 minutes +"
        ]
      }
    ];

    let currentQuestion = 0;
    let answers = new Array(questions.length).fill([]);
    
    const questionText = document.getElementById('question-text');
    const optionsContainer = document.getElementById('options-container');
    const progressBar = document.getElementById('progress-bar');

    function updateProgress() {
      const progress = ((currentQuestion + 1) / questions.length) * 100;
      progressBar.style.width = `${progress}%`;
    }

    function createOptionButton(option, selected = false) {
      const button = document.createElement('button');
      button.textContent = option;
      button.className = `p-3 rounded-md text-sm transition-all duration-150 ${
        selected
          ? 'bg-mustard text-creme'
          : 'bg-satured-creme text-mustard hover:bg-mustard hover:text-creme'
      }`;
      return button;
    }

    function showQuestion() {
      const question = questions[currentQuestion];
      questionText.textContent = question.text;
      optionsContainer.innerHTML = '';

      question.options.forEach(option => {
        const button = createOptionButton(
          option,
          answers[currentQuestion].includes(option)
        );
        
        button.addEventListener('click', () => {
          if (question.type === 'single') {
            // For single selection, clear previous selection
            optionsContainer.querySelectorAll('button').forEach(btn => {
              btn.className = btn.className.replace('bg-mustard text-creme', 'bg-satured-creme text-mustard');
            });
            answers[currentQuestion] = [option];
            button.className = button.className.replace('bg-satured-creme text-mustard', 'bg-mustard text-creme');
          } else {
            // For multiple selection, toggle selection
            if (answers[currentQuestion].includes(option)) {
              answers[currentQuestion] = answers[currentQuestion].filter(a => a !== option);
              button.className = button.className.replace('bg-mustard text-creme', 'bg-satured-creme text-mustard');
            } else {
              answers[currentQuestion].push(option);
              button.className = button.className.replace('bg-satured-creme text-mustard', 'bg-mustard text-creme');
            }
          }
        });
        
        optionsContainer.appendChild(button);
      });

      // Add navigation buttons
      const navContainer = document.createElement('div');
      navContainer.className = 'flex justify-between mt-8';

      if (currentQuestion > 0) {
        const backButton = document.createElement('button');
        backButton.textContent = 'Previous';
        backButton.className = 'bg-true-blue hover:bg-black text-bue-blue hover:text-white  py-2 px-4 rounded-md gap-2 transition-all duration-150 hover:cursor-pointer';
        backButton.onclick = () => {
          currentQuestion--;
          showQuestion();
          updateProgress();
        };
        navContainer.appendChild(backButton);
      }

      const nextButton = document.createElement('button');
      nextButton.textContent = currentQuestion === questions.length - 1 ? 'Complete' : 'Next';
      nextButton.className = 'bg-true-blue hover:bg-black text-bue-blue hover:text-white  py-2 px-4 rounded-md gap-2 transition-all duration-150 hover:cursor-pointer';
      nextButton.onclick = () => {
        if (currentQuestion === questions.length - 1) {
          showResults();
        } else {
          currentQuestion++;
          showQuestion();
          updateProgress();
        }
      };
      navContainer.appendChild(nextButton);

      optionsContainer.appendChild(navContainer);
    }

    function showResults() {
      const recommendedSoup = calculateRecommendation();
      welcomeScreen.classList.add('hidden');
      quizContainer.classList.add('hidden');
      resultsScreen.classList.remove('hidden');
      
      const soupNameElement = document.getElementById('soup-name');
      const soupDescriptionElement = document.getElementById('soup-description');
      
      if (soupNameElement && soupDescriptionElement) {
        soupNameElement.textContent = recommendedSoup.name;
        soupDescriptionElement.textContent = recommendedSoup.description;
      }
    }

    function calculateRecommendation() {
      // Example recommendation logic - this should be expanded based on your soup database
      const symptoms = answers[0];
      const consistency = answers[1];
      const spiciness = answers[2];
      const appetite = answers[3];
      const dietary = answers[4];
      const time = answers[5];

      // Simple mapping for demonstration
      const recommendations = [
        {
          name: "Classic Chicken Noodle Soup",
          description: "A comforting bowl of tender chicken, hearty noodles, and vegetables in a rich broth. Perfect for cold symptoms and easy on the stomach.",
          ingredients: ["chicken", "noodles", "carrots", "celery", "onion", "garlic", "chicken broth"],
          preparation_time: "30 minutes",
          dietary_restrictions: ["None"],
          symptoms_addressed: ["cold", "flu", "sore throat"],
          consistency: "broth",
          spiciness: "mild",
          appetite_level: "moderate"
        },
        {
          name: "Spicy Tom Yum",
          description: "A hot and sour Thai soup with shrimp, mushrooms, and aromatic spices. Great for clearing sinuses and boosting energy.",
          ingredients: ["shrimp", "mushrooms", "lemongrass", "galangal", "kaffir lime leaves", "chili peppers", "fish sauce"],
          preparation_time: "20 minutes",
          dietary_restrictions: ["None"],
          symptoms_addressed: ["congestion", "fatigue"],
          consistency: "broth",
          spiciness: "spicy",
          appetite_level: "light"
        },
        {
          name: "Creamy Butternut Squash Soup",
          description: "A smooth, velvety soup made with roasted butternut squash and warm spices. Ideal for vegetarians and those wanting comfort food.",
          ingredients: ["butternut squash", "onion", "garlic", "vegetable broth", "coconut milk", "nutmeg", "cinnamon"],
          preparation_time: "45 minutes",
          dietary_restrictions: ["Vegetarian", "Vegan"],
          symptoms_addressed: ["fatigue", "stress"],
          consistency: "creamy",
          spiciness: "mild",
          appetite_level: "moderate"
        },
        {
          name: "Quick Miso Soup",
          description: "A light but flavorful Japanese soup with tofu, seaweed, and umami-rich miso. Perfect for busy days and digestive health.",
          ingredients: ["miso paste", "tofu", "seaweed", "green onions", "dashi stock"],
          preparation_time: "10 minutes",
          dietary_restrictions: ["Vegetarian", "Vegan"],
          symptoms_addressed: ["upset stomach", "fatigue"],
          consistency: "broth",
          spiciness: "mild",
          appetite_level: "light"
        }
      ];

      // Simple matching logic - can be made more sophisticated
      let bestMatch = recommendations[0];
      let maxMatchingConditions = 0;

      recommendations.forEach(soup => {
        let matchingConditions = 0;
        if (soup.symptoms_addressed.some(s => symptoms.includes(s))) matchingConditions++;
        if (soup.consistency === consistency[0]) matchingConditions++;
        if (soup.spiciness === spiciness[0]) matchingConditions++;
        if (soup.appetite_level === appetite[0]) matchingConditions++;
        if (soup.dietary_restrictions.some(d => dietary.includes(d))) matchingConditions++;
        if (soup.preparation_time === time[0]) matchingConditions++;

        if (matchingConditions > maxMatchingConditions) {
          maxMatchingConditions = matchingConditions;
          bestMatch = soup;
        }
      });

      return bestMatch;
    }

    // Event listeners
    startButton.addEventListener('click', () => {
      welcomeScreen.classList.add('hidden');
      quizContainer.classList.remove('hidden');
      showQuestion();
      updateProgress();
    });

    function restartQuiz() {
      currentQuestion = 0;
      answers = new Array(questions.length).fill([]);
      resultsScreen.classList.add('hidden');
      welcomeScreen.classList.remove('hidden');
      showQuestion();
      updateProgress();
    }

    // Handle "Can Soup" button click
    document.getElementById('can-soup')?.addEventListener('click', async () => {
      const soupName = document.getElementById('soup-name')?.textContent;
      const soupDescription = document.getElementById('soup-description')?.textContent;
      
      if (!soupName || !soupDescription) {
        alert('Error: Could not find soup details');
        return;
      }

      try {
        let shelfId;
        
        // First check if user has a default shelf
        const { data: shelves, error: shelfError } = await window.supabase
          .from('soup_shelves')
          .select('*')
          .eq('user_id', window.userId)
          .eq('name', 'My Soups')
          .single();

        if (shelfError || !shelves) {
          console.log('Creating default shelf...');
          // Create default shelf if it doesn't exist
          const { data: newShelf, error: createError } = await window.supabase
            .from('soup_shelves')
            .insert({
              name: 'My Soups',
              description: 'My collection of recommended soups',
              user_id: window.userId,
              is_public: false,
              likes_count: 0
            })
            .select()
            .single();

          if (createError) {
            console.error('Error creating default shelf:', createError);
            throw createError;
          }

          if (!newShelf) {
            throw new Error('No data returned from default shelf creation');
          }

          console.log('Default shelf created:', newShelf);
          shelfId = newShelf.id;
        } else {
          console.log('Using existing default shelf:', shelves);
          shelfId = shelves.id;
        }

        // First, create or get the soup
        console.log('Creating soup...');
        const recommendedSoup = calculateRecommendation();
        
        // Remove any extra fields that might be in the recommendation
        const soupData = {
          name: recommendedSoup.name,
          description: recommendedSoup.description,
          ingredients: recommendedSoup.ingredients,
          preparation_time: recommendedSoup.preparation_time,
          dietary_restrictions: recommendedSoup.dietary_restrictions,
          symptoms_addressed: recommendedSoup.symptoms_addressed,
          consistency: recommendedSoup.consistency,
          spiciness: recommendedSoup.spiciness,
          appetite_level: recommendedSoup.appetite_level
        };

        const { data: createdSoup, error: soupError } = await window.supabase
          .from('soups')
          .insert(soupData)
          .select()
          .single();

        if (soupError) {
          console.error('Error creating soup:', soupError);
          throw soupError;
        }

        if (!createdSoup) {
          throw new Error('No data returned from soup creation');
        }

        console.log('Soup created:', createdSoup);

        // Then add it to the shelf
        console.log('Adding soup to shelf...');
        const { data: soupInShelfData, error: soupInShelfError } = await window.supabase
          .from('soups_in_shelf')
          .insert({
            shelf_id: shelfId,
            soup_id: createdSoup.id,
            added_at: new Date().toISOString()
          })
          .select()
          .single();

        if (soupInShelfError) {
          console.error('Error adding soup to shelf:', soupInShelfError);
          throw soupInShelfError;
        }

        if (!soupInShelfData) {
          throw new Error('No data returned from soup addition');
        }

        console.log('Soup added to shelf successfully:', soupInShelfData);
        alert('Soup has been added to your shelf!');
        window.location.href = '/shelves';
      } catch (error) {
        console.error('Error saving soup:', error);
        alert(`Failed to save soup: ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    });
  </script>
</Layout>
---
import Layout from '../layouts/Layout.astro';
import { supabase } from "../lib/supabase";

// Define types
interface Soup {
  id: string;
  name: string;
  description: string;
  ingredients: string[];
  preparation_time: string;
  dietary_restrictions: string[];
  symptoms_addressed: string[];
  consistency: string;
  spiciness: string;
  appetite_level: string;
}

interface SoupInShelf {
  id: string;
  shelf_id: string;
  soup_id: string;
  added_at: string;
}

interface Shelf {
  id: string;
  name: string;
  description: string;
  user_id: string;
  is_public: boolean;
  likes_count: number;
  soups: (SoupInShelf & { soup: Soup })[];
}

// Add new type for shelf likes
interface ShelfLike {
  id: string;
  shelf_id: string;
  user_id: string;
  created_at: string;
}

const { cookies } = Astro;
const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return Astro.redirect("/signin");
}

// Get user session
const { data: { session }, error: sessionError } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

if (sessionError || !session) {
  return Astro.redirect("/signin");
}

const userId = session.user.id;

// Get user's shelves with like status
const { data: shelves, error: shelvesError } = await supabase
  .from('soup_shelves')
  .select(`
    *,
    shelf_likes!inner (
      user_id
    )
  `)
  .eq('user_id', userId);

if (shelvesError) {
  console.error('Error fetching shelves:', shelvesError);
}

// Get soups for each shelf
const shelvesWithSoups = await Promise.all(
  (shelves || []).map(async (shelf) => {
    // First get the soup IDs in this shelf
    const { data: soupsInShelf, error: soupsInShelfError } = await supabase
      .from('soups_in_shelf')
      .select('*')
      .eq('shelf_id', shelf.id);

    if (soupsInShelfError) {
      console.error(`Error fetching soups_in_shelf for shelf ${shelf.id}:`, soupsInShelfError);
      return { ...shelf, soups: [] };
    }

    // Then get the actual soup data for each soup ID
    const soupsWithData = await Promise.all(
      (soupsInShelf || []).map(async (soupInShelf) => {
        const { data: soup, error: soupError } = await supabase
          .from('soups')
          .select('*')
          .eq('id', soupInShelf.soup_id)
          .single();

        if (soupError) {
          console.error(`Error fetching soup ${soupInShelf.soup_id}:`, soupError);
          return { ...soupInShelf, soup: null };
        }

        return { ...soupInShelf, soup };
      })
    );

    return { ...shelf, soups: soupsWithData.filter(s => s.soup !== null) };
  })
);

// Get public shelves with like status
const { data: publicShelves, error: publicShelvesError } = await supabase
  .from('soup_shelves')
  .select(`
    *,
    profiles (
      username
    ),
    shelf_likes!inner (
      user_id
    )
  `)
  .eq('is_public', true)
  .order('likes_count', { ascending: false })
  .limit(5);

---

<Layout title="My Soup Shelves">
  <div class="min-h-screen flex flex-col bg-bue-blue bg-[url(background2.png)] bg-size-[auto_150px] diagonal-scroll">
    <!-- Header -->
    <header class="fixed top-0 w-full p-4 flex justify-between items-center bg-creme border-b border-mustard z-10">
      <a href="/" class="text-sm text-orange hover:text-mustard transition-all duration-150">
        Back to Home
      </a>
      <h1 class="text-xl font-semibold text-mustard">My Soup Shelves</h1>
      <div class="flex gap-4">
        <button id="create-shelf" class="text-sm text-orange hover:text-mustard transition-all duration-150">
          Create Shelf
        </button>
        <a href="/quiz" class="text-sm text-orange hover:text-mustard transition-all duration-150">
          Take Quiz
        </a>
      </div>
    </header>

    <!-- Main content -->
    <div class="flex-1 pt-16 pb-4 px-4 max-w-4xl mx-auto w-full">
      {shelvesWithSoups.length === 0 ? (
        <div class="text-center mt-8">
          <p class="text-true-blue mb-4">You don't have any soup shelves yet!</p>
          <a href="/quiz" class="bg-true-blue hover:bg-black text-bue-blue hover:text-white py-2 px-4 rounded-md transition-all duration-150">
            Take the Quiz to Get Started
          </a>
        </div>
      ) : (
        <div class="grid gap-6">
          {shelvesWithSoups.map((shelf: Shelf) => (
            <div class="bg-satured-creme rounded-lg p-6 shadow-lg">
              <div class="flex justify-between items-center mb-4">
                <div>
                  <h2 class="text-xl font-semibold text-mustard">{shelf.name}</h2>
                  <p class="text-sm text-super-saturated-creme">
                    {shelf.soups.length} {shelf.soups.length === 1 ? 'soup' : 'soups'}
                  </p>
                </div>
                <div class="flex items-center gap-4">
                  <button 
                    class="text-sm text-orange hover:text-mustard transition-all duration-150"
                    data-shelf-id={shelf.id}
                    data-is-public={shelf.is_public}
                  >
                    {shelf.is_public ? 'Make Private' : 'Make Public'}
                  </button>
                  <div class="flex items-center gap-2">
                    <span class="text-sm text-super-saturated-creme">❤️ {shelf.likes_count}</span>
                  </div>
                </div>
              </div>
              <p class="text-super-saturated-creme mb-4">{shelf.description}</p>
              
              {shelf.soups.length === 0 ? (
                <p class="text-center text-super-saturated-creme py-4">
                  No soups in this shelf yet
                </p>
              ) : (
                <div class="grid gap-4">
                  {shelf.soups.map((soupInShelf) => (
                    <div class="bg-creme rounded-lg p-4">
                      <div class="flex justify-between items-start mb-2">
                        <h3 class="text-lg font-semibold text-mustard">{soupInShelf.soup.name}</h3>
                        <span class="text-sm text-super-saturated-creme">{soupInShelf.soup.preparation_time}</span>
                      </div>
                      <p class="text-super-saturated-creme mb-3">{soupInShelf.soup.description}</p>
                      
                      <div class="flex flex-wrap gap-2 mb-3">
                        {soupInShelf.soup.symptoms_addressed.map((symptom: string) => (
                          <span class="bg-mustard text-creme text-xs px-2 py-1 rounded-full">
                            {symptom}
                          </span>
                        ))}
                      </div>
                      
                      <div class="flex flex-wrap gap-2">
                        <span class="bg-true-blue text-bue-blue text-xs px-2 py-1 rounded-full">
                          {soupInShelf.soup.consistency}
                        </span>
                        <span class="bg-true-blue text-bue-blue text-xs px-2 py-1 rounded-full">
                          {soupInShelf.soup.spiciness}
                        </span>
                        <span class="bg-true-blue text-bue-blue text-xs px-2 py-1 rounded-full">
                          {soupInShelf.soup.appetite_level}
                        </span>
                        {soupInShelf.soup.dietary_restrictions.map((restriction: string) => (
                          <span class="bg-true-blue text-bue-blue text-xs px-2 py-1 rounded-full">
                            {restriction}
                          </span>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>
      )}

      {/* Public Shelves Section */}
      {publicShelves && publicShelves.length > 0 && (
        <div class="mt-12">
          <h2 class="text-xl font-semibold text-mustard mb-6">Popular Public Shelves</h2>
          <div class="grid gap-6">
            {publicShelves.map((shelf: any) => (
              <div class="bg-satured-creme rounded-lg p-6 shadow-lg">
                <div class="flex justify-between items-center mb-4">
                  <div>
                    <h3 class="text-lg font-semibold text-mustard">{shelf.name}</h3>
                    <p class="text-sm text-super-saturated-creme">by {shelf.profiles?.username}</p>
                  </div>
                  <div class="flex items-center gap-4">
                    <button 
                      class="like-button text-sm text-orange hover:text-mustard transition-all duration-150"
                      data-shelf-id={shelf.id}
                    >
                      Like Shelf
                    </button>
                    <span class="text-sm text-super-saturated-creme">❤️ {shelf.likes_count}</span>
                  </div>
                </div>
                <p class="text-super-saturated-creme mb-4">{shelf.description}</p>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  </div>

  <!-- Create Shelf Modal -->
  <div id="create-shelf-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-20">
    <div class="bg-creme rounded-lg p-6 w-full max-w-md">
      <h2 class="text-xl font-semibold text-mustard mb-4">Create New Shelf</h2>
      <form id="create-shelf-form" class="space-y-4">
        <div>
          <label for="shelf-name" class="block text-super-saturated-creme text-sm mb-1">Shelf Name</label>
          <input 
            type="text" 
            id="shelf-name" 
            required 
            class="w-full rounded-md bg-satured-creme px-4 py-2 text-sm text-mustard placeholder:text-super-saturated-creme appearance-none outline-mustard focus:outline-2"
          >
        </div>
        <div>
          <label for="shelf-description" class="block text-super-saturated-creme text-sm mb-1">Description</label>
          <textarea 
            id="shelf-description" 
            required 
            class="w-full rounded-md bg-satured-creme px-4 py-2 text-sm text-mustard placeholder:text-super-saturated-creme appearance-none outline-mustard focus:outline-2"
          ></textarea>
        </div>
        <div class="flex items-center gap-2">
          <input type="checkbox" id="is-public" class="text-mustard">
          <label for="is-public" class="text-super-saturated-creme text-sm">Make this shelf public</label>
        </div>
        <div class="flex justify-end gap-2 mt-6">
          <button type="button" id="cancel-create" class="text-sm text-orange hover:text-mustard transition-all duration-150">
            Cancel
          </button>
          <button type="submit" class="bg-mustard text-creme px-4 py-2 rounded-md hover:bg-dark-orange transition-all duration-150">
            Create Shelf
          </button>
        </div>
      </form>
    </div>
  </div>

  <script define:vars={{ userId }}>
    const supabase = window.supabase;

    const modal = document.getElementById('create-shelf-modal');
    const createButton = document.getElementById('create-shelf');
    const cancelButton = document.getElementById('cancel-create');
    const createForm = document.getElementById('create-shelf-form');

    // Show/hide modal
    createButton?.addEventListener('click', () => {
      modal?.classList.remove('hidden');
    });

    cancelButton?.addEventListener('click', () => {
      modal?.classList.add('hidden');
    });

    // Handle form submission
    createForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const nameInput = document.getElementById('shelf-name');
      const descriptionInput = document.getElementById('shelf-description');
      const isPublicInput = document.getElementById('is-public');

      if (!(nameInput instanceof HTMLInputElement) || 
          !(descriptionInput instanceof HTMLTextAreaElement) || 
          !(isPublicInput instanceof HTMLInputElement)) {
        console.error('Form inputs not found or invalid');
        return;
      }

      try {
        console.log('Creating new shelf...');
        const { data, error } = await supabase
          .from('soup_shelves')
          .insert([
            {
              name: nameInput.value,
              description: descriptionInput.value,
              is_public: isPublicInput.checked,
              user_id: userId,
              likes_count: 0
            }
          ])
          .select();

        if (error) {
          console.error('Supabase error:', error);
          throw error;
        }

        if (!data) {
          throw new Error('No data returned from shelf creation');
        }

        console.log('Shelf created successfully:', data);
        // Refresh the page to show new shelf
        window.location.reload();
      } catch (error) {
        console.error('Error creating shelf:', error);
        alert(`Failed to create shelf: ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    });

    // Handle shelf privacy toggles
    document.querySelectorAll('[data-shelf-id]').forEach(button => {
      if (button.hasAttribute('data-is-public')) {
        button.addEventListener('click', async (e) => {
          const target = e.currentTarget;
          const shelfId = target instanceof HTMLButtonElement ? target.dataset.shelfId : null;
          const isCurrentlyPublic = target instanceof HTMLButtonElement ? target.dataset.isPublic === 'true' : false;

          try {
            const { error } = await supabase
              .from('soup_shelves')
              .update({ is_public: !isCurrentlyPublic })
              .eq('id', shelfId);

            if (error) throw error;

            // Update the button text and data attribute
            if (target instanceof HTMLButtonElement) {
              target.textContent = isCurrentlyPublic ? 'Make Public' : 'Make Private';
              target.dataset.isPublic = (!isCurrentlyPublic).toString();
            }

            // Refresh the page to show updated status
            window.location.reload();
          } catch (error) {
            console.error('Error updating shelf:', error);
            alert('Failed to update shelf. Please try again.');
          }
        });
      }
    });

    // Handle likes
    document.querySelectorAll('.like-button').forEach(button => {
      button.addEventListener('click', async (e) => {
        const target = e.currentTarget;
        const shelfId = target instanceof HTMLButtonElement ? target.dataset.shelfId : null;

        try {
          // First check if user has already liked this shelf
          const { data: existingLike, error: checkError } = await supabase
            .from('shelf_likes')
            .select('*')
            .eq('shelf_id', shelfId)
            .eq('user_id', userId)
            .single();

          if (checkError && checkError.code !== 'PGRST116') {
            throw checkError;
          }

          if (existingLike) {
            // Unlike the shelf
            const { error: unlikeError } = await supabase
              .from('shelf_likes')
              .delete()
              .eq('id', existingLike.id);

            if (unlikeError) throw unlikeError;

            // Update likes count
            const { error: updateError } = await supabase
              .from('soup_shelves')
              .update({ likes_count: supabase.rpc('decrement_likes_count') })
              .eq('id', shelfId);

            if (updateError) throw updateError;
          } else {
            // Like the shelf
            const { error: likeError } = await supabase
              .from('shelf_likes')
              .insert([{ shelf_id: shelfId, user_id: userId }]);

            if (likeError) throw likeError;

            // Update likes count
            const { error: updateError } = await supabase
              .from('soup_shelves')
              .update({ likes_count: supabase.rpc('increment_likes_count') })
              .eq('id', shelfId);

            if (updateError) throw updateError;
          }

          // Refresh the page to show updated likes
          window.location.reload();
        } catch (error) {
          console.error('Error handling like:', error);
          alert('Failed to update like. Please try again.');
        }
      });
    });
  </script>
</Layout> 
---
import Layout from '../layouts/Layout.astro';
import { supabase } from "../lib/supabase";

// Define types
interface Soup {
  id: string;
  name: string;
  description: string;
  ingredients: string[];
  preparation_time: string;
  dietary_restrictions: string[];
  symptoms_addressed: string[];
  consistency: string;
  spiciness: string;
  appetite_level: string;
}

interface SoupInShelf {
  id: string;
  shelf_id: string;
  soup_id: string;
  added_at: string;
}

interface Shelf {
  id: string;
  name: string;
  description: string;
  user_id: string;
  is_public: boolean;
  likes_count: number;
  soups: (SoupInShelf & { soup: Soup })[];
}

// Add new type for shelf likes
interface ShelfLike {
  id: string;
  shelf_id: string;
  user_id: string;
  created_at: string;
}

const { cookies } = Astro;
const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return Astro.redirect("/signin");
}

// Get user session
const { data: { session }, error: sessionError } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

if (sessionError || !session) {
  return Astro.redirect("/signin");
}

const userId = session.user.id;

// Fetch user's shelves with like status and public shelves
const { data: userShelves, error: userShelvesError } = await supabase
  .from('soup_shelves')
  .select(`
    *,
    soups_in_shelf (
      soup_id
    )
  `)
  .eq('user_id', userId)
  .order('created_at', { ascending: false });

// Fetch public shelves with like status
const { data: publicShelves, error: publicShelvesError } = await supabase
  .from('soup_shelves')
  .select(`
    *,
    soups_in_shelf (
      soup_id
    )
  `)
  .eq('is_public', true)
  .order('likes_count', { ascending: false })
  .limit(5);

if (userShelvesError) {
  console.error('Error fetching user shelves:', userShelvesError);
}

if (publicShelvesError) {
  console.error('Error fetching public shelves:', publicShelvesError);
}

// Ensure we have arrays even if the data is null
const userShelvesList = userShelves || [];
const publicShelvesList = publicShelves || [];

// Fetch soup data for each shelf
const userShelvesWithSoups = await Promise.all(
  userShelvesList.map(async (shelf) => {
    const soupIds = shelf.soups_in_shelf?.map((sis: SoupInShelf) => sis.soup_id) || [];
    const { data: soups, error: soupsError } = await supabase
      .from('soups')
      .select('*')
      .in('id', soupIds);

    if (soupsError) {
      console.error('Error fetching soups for shelf:', shelf.id, soupsError);
      return { ...shelf, soups: [] };
    }

    return { ...shelf, soups: soups || [] };
  })
);

const publicShelvesWithSoups = await Promise.all(
  publicShelvesList.map(async (shelf) => {
    const soupIds = shelf.soups_in_shelf?.map((sis: SoupInShelf) => sis.soup_id) || [];
    const { data: soups, error: soupsError } = await supabase
      .from('soups')
      .select('*')
      .in('id', soupIds);

    if (soupsError) {
      console.error('Error fetching soups for shelf:', shelf.id, soupsError);
      return { ...shelf, soups: [] };
    }

    return { ...shelf, soups: soups || [] };
  })
);

---

<Layout title="My Soup Shelves">
  <div class="min-h-screen flex flex-col bg-bue-blue bg-[url(shelf.png)] bg-cover">
    <!-- Header -->
    <header class="fixed top-0 w-full p-4 flex justify-between items-center bg-creme border-b border-mustard z-10">
      <div class="flex items-center gap-4">
        <a href="/" class="text-sm text-orange hover:text-mustard transition-all duration-150">
          Home
        </a>
        <a href="/quiz" class="text-sm text-orange hover:text-mustard transition-all duration-150">
          Take Quiz
        </a>
      </div>
      <h1 class="text-xl font-semibold text-mustard">My Soup Shelves</h1>
      <button id="create-shelf" class="text-sm text-orange hover:text-mustard transition-all duration-150">
        Create Shelf
      </button>
    </header>

    <!-- Main content -->
    <div class="flex-1 pt-16 pb-4 px-4 max-w-4xl mx-auto w-full">
      {userShelvesWithSoups.length === 0 ? (
        <div class="text-center mt-8">
          <p class="text-true-blue mb-4">You don't have any soup shelves yet!</p>
          <div class="flex flex-col gap-4 items-center">
            <a href="/quiz" class="bg-true-blue hover:bg-black text-bue-blue hover:text-white py-2 px-4 rounded-md transition-all duration-150">
              Take the Quiz to Get Started
            </a>
            <button id="create-shelf-empty" class="text-sm text-orange hover:text-mustard transition-all duration-150">
              Or create a shelf manually
            </button>
          </div>
        </div>
      ) : (
        <div class="grid gap-6">
          {userShelvesWithSoups.map((shelf) => (
            <div class="bg-satured-creme rounded-lg p-6 shadow-lg">
              <div class="flex justify-between items-center mb-4">
                <div>
                  <h2 class="text-xl font-semibold text-mustard">{shelf.name}</h2>
                  <p class="text-sm text-super-saturated-creme">
                    {shelf.soups.length} {shelf.soups.length === 1 ? 'soup' : 'soups'}
                  </p>
                </div>
                <div class="flex items-center gap-4">
                  <button 
                    class="text-sm text-orange hover:text-mustard transition-all duration-150"
                    data-shelf-id={shelf.id}
                    data-is-public={shelf.is_public}
                  >
                    {shelf.is_public ? 'Make Private' : 'Make Public'}
                  </button>
                  <div class="flex items-center gap-2">
                    <span class="text-sm text-super-saturated-creme">❤️ {shelf.likes_count}</span>
                  </div>
                </div>
              </div>
              <p class="text-super-saturated-creme mb-4">{shelf.description}</p>
              
              {shelf.soups.length === 0 ? (
                <div class="text-center py-4">
                  <p class="text-super-saturated-creme mb-4">No soups in this shelf yet</p>
                  <a href="/quiz" class="text-sm text-orange hover:text-mustard transition-all duration-150">
                    Take the Quiz to Add Soups
                  </a>
                </div>
              ) : (
                <div class="grid gap-4">
                  {shelf.soups.map((soup: Soup) => (
                    <div class="bg-creme rounded-lg p-4">
                      <div class="flex justify-between items-start mb-2">
                        <h3 class="text-lg font-semibold text-mustard">{soup.name}</h3>
                        <span class="text-sm text-super-saturated-creme">{soup.preparation_time}</span>
                      </div>
                      <p class="text-super-saturated-creme mb-3">{soup.description}</p>
                      
                      <div class="flex flex-wrap gap-2 mb-3">
                        {soup.symptoms_addressed.map((symptom) => (
                          <span class="bg-mustard text-creme text-xs px-2 py-1 rounded-full">
                            {symptom}
                          </span>
                        ))}
                      </div>
                      
                      <div class="flex flex-wrap gap-2">
                        <span class="bg-true-blue text-bue-blue text-xs px-2 py-1 rounded-full">
                          {soup.consistency}
                        </span>
                        <span class="bg-true-blue text-bue-blue text-xs px-2 py-1 rounded-full">
                          {soup.spiciness}
                        </span>
                        <span class="bg-true-blue text-bue-blue text-xs px-2 py-1 rounded-full">
                          {soup.appetite_level}
                        </span>
                        {soup.dietary_restrictions.map((restriction) => (
                          <span class="bg-true-blue text-bue-blue text-xs px-2 py-1 rounded-full">
                            {restriction}
                          </span>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>
      )}

      {/* Public Shelves Section */}
      {publicShelvesWithSoups.length > 0 && (
        <div class="mt-12">
          <h2 class="text-xl font-semibold text-satured-creme mb-6">Popular Public Shelves</h2>
          <div class="grid gap-6">
            {publicShelvesWithSoups.map((shelf) => (
              <div class="bg-satured-creme rounded-lg p-6 shadow-lg">
                <div class="flex justify-between items-center mb-4">
                  <div>
                    <h3 class="text-lg font-semibold text-mustard">{shelf.name}</h3>
                    <p class="text-sm text-super-saturated-creme">by Anonymous</p>
                  </div>
                  <div class="flex items-center gap-4">
                    <button 
                      class="like-button text-sm text-orange hover:text-mustard transition-all duration-150"
                      data-shelf-id={shelf.id}
                    >
                      Like Shelf
                    </button>
                    <span class="text-sm text-super-saturated-creme">❤️ {shelf.likes_count || 0}</span>
                  </div>
                </div>
                <p class="text-super-saturated-creme mb-4">{shelf.description}</p>
                <div class="flex items-center gap-2">
                  <span class="text-xs text-super-saturated-creme">
                    {shelf.soups.length} {shelf.soups.length === 1 ? 'soup' : 'soups'}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  </div>

  <!-- Create Shelf Modal -->
  <div id="create-shelf-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-20">
    <div class="bg-creme rounded-lg p-6 w-full max-w-md">
      <h2 class="text-xl font-semibold text-mustard mb-4">Create New Shelf</h2>
      <form id="create-shelf-form" class="space-y-4">
        <div>
          <label for="shelf-name" class="block text-super-saturated-creme text-sm mb-1">Shelf Name</label>
          <input 
            type="text" 
            id="shelf-name" 
            required 
            class="w-full rounded-md bg-satured-creme px-4 py-2 text-sm text-mustard placeholder:text-super-saturated-creme appearance-none outline-mustard focus:outline-2"
          >
        </div>
        <div>
          <label for="shelf-description" class="block text-super-saturated-creme text-sm mb-1">Description</label>
          <textarea 
            id="shelf-description" 
            required 
            class="w-full rounded-md bg-satured-creme px-4 py-2 text-sm text-mustard placeholder:text-super-saturated-creme appearance-none outline-mustard focus:outline-2"
          ></textarea>
        </div>
        <div class="flex items-center gap-2">
          <input type="checkbox" id="is-public" class="text-mustard">
          <label for="is-public" class="text-super-saturated-creme text-sm">Make this shelf public</label>
        </div>
        <div class="flex justify-end gap-2 mt-6">
          <button type="button" id="cancel-create" class="text-sm text-orange hover:text-mustard transition-all duration-150">
            Cancel
          </button>
          <button type="submit" class="bg-mustard text-creme px-4 py-2 rounded-md hover:bg-dark-orange transition-all duration-150">
            Create Shelf
          </button>
        </div>
      </form>
    </div>
  </div>

  <script define:vars={{ userId }}>
    // Expose userId to window
    window.userId = userId;

    // Create and expose Supabase client
    const supabaseClient = {
      from: (table) => ({
        select: (columns = '*') => ({
          eq: (column, value) => ({
            eq: (column2, value2) => ({
              single: async () => {
                const response = await fetch(`/api/supabase/${table}?userId=${window.userId}&column=${column}&value=${value}&column2=${column2}&value2=${value2}`, {
                  method: 'GET',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                });
                return response.json();
              },
            }),
            single: async () => {
              const response = await fetch(`/api/supabase/${table}?userId=${window.userId}&column=${column}&value=${value}`, {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',
                },
              });
              return response.json();
            },
          }),
        }),
        insert: (data) => ({
          select: () => ({
            single: async () => {
              const response = await fetch(`/api/supabase/${table}`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
              });
              return response.json();
            },
          }),
        }),
        update: (data) => ({
          eq: async (column, value) => {
            const response = await fetch(`/api/supabase/${table}?value=${value}`, {
              method: 'PATCH',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(data),
            });
            return response.json();
          },
        }),
        delete: () => ({
          eq: async (column, value) => {
            const response = await fetch(`/api/supabase/${table}?userId=${window.userId}&column=${column}&value=${value}`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              },
            });
            return response.json();
          },
        }),
      }),
    };

    window.supabase = supabaseClient;

    // Create notification element
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 hidden';
    document.body.appendChild(notification);

    function showNotification(message, isError = false) {
      notification.textContent = message;
      notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
        isError ? 'bg-red-500 text-white' : 'bg-green-500 text-white'
      }`;
      notification.classList.remove('hidden');
      setTimeout(() => {
        notification.classList.add('hidden');
      }, 5000);
    }

    const modal = document.getElementById('create-shelf-modal');
    const createButton = document.getElementById('create-shelf');
    const cancelButton = document.getElementById('cancel-create');
    const createForm = document.getElementById('create-shelf-form');

    // Show/hide modal
    createButton?.addEventListener('click', () => {
      modal?.classList.remove('hidden');
    });

    cancelButton?.addEventListener('click', () => {
      modal?.classList.add('hidden');
    });

    // Handle form submission
    createForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const nameInput = document.getElementById('shelf-name');
      const descriptionInput = document.getElementById('shelf-description');
      const isPublicInput = document.getElementById('is-public');

      if (!(nameInput instanceof HTMLInputElement) || 
          !(descriptionInput instanceof HTMLTextAreaElement) || 
          !(isPublicInput instanceof HTMLInputElement)) {
        console.error('Form inputs not found or invalid');
        showNotification('Form inputs not found or invalid', true);
        return;
      }

      try {
        const shelfData = {
          name: nameInput.value,
          description: descriptionInput.value,
          is_public: isPublicInput.checked,
          user_id: userId,
          likes_count: 0
        };

        const response = await fetch('/api/supabase/soup_shelves', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(shelfData),
        });

        const result = await response.json();

        if (response.ok && result.id) {
          showNotification('Shelf created successfully!');
          
          // Clear the form
          nameInput.value = '';
          descriptionInput.value = '';
          isPublicInput.checked = false;
          
          // Close modal
          modal?.classList.add('hidden');
          
          // Force a hard refresh of the page
          window.location.reload();
        } else {
          throw new Error(result.error || 'Failed to create shelf');
        }
      } catch (error) {
        console.error('Error creating shelf:', error);
        showNotification('Failed to create shelf. Please try again.', true);
        modal?.classList.remove('hidden');
      }
    });

    // Handle shelf privacy toggles
    document.querySelectorAll('[data-shelf-id]').forEach(button => {
      if (button.hasAttribute('data-is-public')) {
        button.addEventListener('click', async (e) => {
          const target = e.currentTarget;
          const shelfId = target instanceof HTMLButtonElement ? target.dataset.shelfId : null;
          const isCurrentlyPublic = target instanceof HTMLButtonElement ? target.dataset.isPublic === 'true' : false;

          try {
            const { error } = await supabase
              .from('soup_shelves')
              .update({ is_public: !isCurrentlyPublic })
              .eq('id', shelfId);

            if (error) throw error;

            // Update the button text and data attribute
            if (target instanceof HTMLButtonElement) {
              target.textContent = isCurrentlyPublic ? 'Make Public' : 'Make Private';
              target.dataset.isPublic = (!isCurrentlyPublic).toString();
            }

            // Refresh the page to show updated status
            window.location.reload();
          } catch (error) {
            console.error('Error updating shelf:', error);
            alert('Failed to update shelf. Please try again.');
          }
        });
      }
    });

    // Handle likes
    document.querySelectorAll('.like-button').forEach(button => {
      button.addEventListener('click', async (e) => {
        const target = e.currentTarget;
        const shelfId = target instanceof HTMLButtonElement ? target.dataset.shelfId : null;

        try {
          // First check if user has already liked this shelf
          const { data: existingLike, error: checkError } = await supabase
            .from('shelf_likes')
            .select('*')
            .eq('shelf_id', shelfId)
            .eq('user_id', userId)
            .single();

          if (checkError && checkError.code !== 'PGRST116') {
            throw checkError;
          }

          // Get current shelf data to access likes_count
          const { data: shelfData, error: shelfError } = await supabase
            .from('soup_shelves')
            .select('likes_count')
            .eq('id', shelfId)
            .single();

          if (shelfError) throw shelfError;

          if (existingLike) {
            // Unlike the shelf
            const { error: unlikeError } = await supabase
              .from('shelf_likes')
              .delete()
              .eq('id', existingLike.id);

            if (unlikeError) throw unlikeError;

            // Update likes count by decrementing
            const { error: updateError } = await supabase
              .from('soup_shelves')
              .update({ likes_count: (shelfData.likes_count || 0) - 1 })
              .eq('id', shelfId);

            if (updateError) throw updateError;
          } else {
            // Like the shelf
            const { error: likeError } = await supabase
              .from('shelf_likes')
              .insert([{ shelf_id: shelfId, user_id: userId }]);

            if (likeError) throw likeError;

            // Update likes count by incrementing
            const { error: updateError } = await supabase
              .from('soup_shelves')
              .update({ likes_count: (shelfData.likes_count || 0) + 1 })
              .eq('id', shelfId);

            if (updateError) throw updateError;
          }

          // Refresh the page to show updated likes
          window.location.reload();
        } catch (error) {
          console.error('Error handling like:', error);
          showNotification('Failed to update like. Please try again.', true);
        }
      });
    });

    // Add event listener for the empty state create button
    document.getElementById('create-shelf-empty')?.addEventListener('click', () => {
      modal?.classList.remove('hidden');
    });
  </script>
</Layout> 